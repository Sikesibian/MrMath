WHITE_SPACE = _{ " " | "\t" | "\r" }
GRAMMAR = { SOI ~ TRANS_UNIT ~ EOI }
NEWLINE = _{ "\n" }

TRANS_UNIT = { BLOCK }
// BLOCK = { (STMT ~ NEWLINE) + }
BLOCK = { STMT* }
STMT = { VAR_STMT | EXPR_STMT | PRINT_STMT }

VAR_STMT = { VAR ~ WHITE_SPACE* ~ IDENTIFIER ~ WHITE_SPACE* ~ "=" ~ WHITE_SPACE* ~ TYPE ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ";" }
// EXPR_STMT = { EXPR ~ WHITE_SPACE* ~ ";" }
EXPR_STMT = { EXPR ~ WHITE_SPACE* }
PRINT_STMT = { "print" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ";" }

ASCII_ALPHA_NUM = { ASCII_ALPHA | ASCII_DIGIT }
EXPR = { ATOM_EXPR ~ (INFIX_OPS ~ ATOM_EXPR)*  }
PREFIX_OPS = { (WHITE_SPACE* ~ PREFIX_OP)* ~ WHITE_SPACE* }
POSTFIX_OPS = { (WHITE_SPACE* ~ POSTFIX_OP)* }
INFIX_OPS = { WHITE_SPACE* ~ INFIX_OP ~ WHITE_SPACE*}
ATOM_EXPR = { PREFIX_OPS ~ PRIMARY_EXPR ~ POSTFIX_OPS }
// PRIMARY_EXPR = { IDENTIFIER | INTEGER | FRACTION | VECTOR | MATRIX | "(" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ")" }
PRIMARY_EXPR = { INTEGER | FRACTION | VECTOR | MATRIX | "(" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ")" }
EXPR_SHORT = { ATOM_EXPR_SHORT ~ (INFIX_OPS ~ ATOM_EXPR_SHORT)*  }
ATOM_EXPR_SHORT = { PREFIX_OPS ~ PRIMARY_EXPR ~ POSTFIX_OPS }
// PRIMARY_EXPR_SHORT = { IDENTIFIER | INTEGER | FRACTION | "(" ~ WHITE_SPACE* ~ EXPR_SHORT ~ WHITE_SPACE* ~ ")" }
PRIMARY_EXPR_SHORT = { INTEGER | FRACTION | "(" ~ WHITE_SPACE* ~ EXPR_SHORT ~ WHITE_SPACE* ~ ")" }

TYPE = { INT_TYPE | FRAC_TYPE | VECTOR_TYPE | MATRIX_TYPE }
INT_TYPE = { "Int" }
FRAC_TYPE = { "Frac" }
MATRIX_TYPE = { "Mat" | "Matrix" }
VECTOR_TYPE = { "Vec" | "Vector" }

PREFIX_OP = { "abs" | "+" | "-" }
POSTFIX_OP = { "!" | "^T" }
INFIX_OP = { MOD_OP | MUL_OP | ADD_OP }
MOD_OP = { "%" | "**" }
MUL_OP = { "*" | "//" | "/" }
ADD_OP = { "+" | "-" }

INTEGER = { ASCII_DIGIT+ }
// FRACTION = { "Frac" ~ "[" ~ WHITE_SPACE* ~ EXPR_SHORT ~ WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ EXPR_SHORT ~ WHITE_SPACE* ~ "]" }
FRACTION = { "Frac"  ~ WHITE_SPACE* ~ "[" ~ WHITE_SPACE* ~ INTEGER ~ WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ INTEGER ~ WHITE_SPACE* ~ "]" }
MATRIX = { "Mat"  ~ WHITE_SPACE* ~ "[" ~ WHITE_SPACE* ~ MATRIX_ROWS ~ WHITE_SPACE* ~ "]" }
MATRIX_ROWS = { VECTOR_ROW ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ VECTOR_ROW)* }
VECTOR = { "Vec" ~ WHITE_SPACE* ~ VECTOR_ROW }
// VECTOR_ROW = { "[" ~ WHITE_SPACE* ~ EXPR_SHORT ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ EXPR_SHORT)* ~ WHITE_SPACE* ~ "]" }
VECTOR_ROW = { "[" ~ WHITE_SPACE* ~ INTEGER ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ INTEGER)* ~ WHITE_SPACE* ~ "]" }
IDENTIFIER = { ASCII_ALPHA ~ ASCII_ALPHA_NUM* }

VAR = { "var" }