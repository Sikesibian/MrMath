WHITE_SPACE = _{ " " | "\t" | "\r" }
NEWLINE = _{ "\n" }
VAR = { "var" }
CONST = { "const" }
ASCII_ALPHA_NUM = { ASCII_ALPHA | ASCII_DIGIT }

GRAMMAR = { SOI ~ TRANS_UNIT ~ EOI }
TRANS_UNIT = { BLOCK }
BLOCK = { STMT* }
STMT = { WHITE_SPACE* ~ VAR_STMT | CONST_STMT | ASSIGN_STMT | EXPR_STMT ~ WHITE_SPACE* }

VAR_STMT = { VAR ~ WHITE_SPACE* ~ IDENTIFIER ~ WHITE_SPACE* ~ "=" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ";" }
CONST_STMT = { CONST ~ WHITE_SPACE* ~ IDENTIFIER ~ WHITE_SPACE* ~ "=" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ";" }
EXPR_STMT = { EXPR ~ WHITE_SPACE* }
PRINT_STMT = { "print" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ";" }
ASSIGN_STMT = { IDENTIFIER ~ WHITE_SPACE* ~ "=" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ";" }

EXPR = { ATOM_EXPR ~ (INFIX_OPS ~ ATOM_EXPR)*  }
ATOM_EXPR = { PREFIX_OPS ~ PRIMARY_EXPR ~ POSTFIX_OPS }
// PRIMARY_EXPR = { INTEGER | FRACTION | VECTOR | MATRIX | POLYNOMIAL | "(" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ")" | IDENTIFIER } // IDENTIFIER is the last alternative
PRIMARY_EXPR = { BOOL | INTEGER | FRACTION | VECTOR | MATRIX | "(" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ ")" | IDENTIFIER } // IDENTIFIER is the last alternative

PREFIX_OPS = { (WHITE_SPACE* ~ PREFIX_OP)* ~ WHITE_SPACE* }
POSTFIX_OPS = { (WHITE_SPACE* ~ POSTFIX_OP)* }
INFIX_OPS = { WHITE_SPACE* ~ INFIX_OP ~ WHITE_SPACE*}

TYPE = { INT_TYPE | FRAC_TYPE | VECTOR_TYPE | MATRIX_TYPE }
INT_TYPE = { "Int" }
FRAC_TYPE = { "Frac" }
MATRIX_TYPE = { "Mat" | "Matrix" }
VECTOR_TYPE = { "Vec" | "Vector" }

BINARY_NOT = { "~" }
LOGICAL_NOT = { "not" }
PREFIX_OP = { "abs" | "+" | "-" | BINARY_NOT | LOGICAL_NOT }
POSTFIX_OP = { "!" | "^T" }
INFIX_OP = { BINARY_OP | MOD_OP | MUL_OP | ADD_OP }
BINARY_OP = { BOOL_OP | LOGICAL_OP | EQ_OP }
BOOL_OP = { "&" | "|" | "^" | "~&" | "~|" | "~^" }
LOGICAL_OP = { "and" | "or" }
EQ_OP = { "==" | "!=" | "<" | "<=" | ">" | ">=" }
MOD_OP = { "%" | "**" }
MUL_OP = { "*" | "//" | "/" }
ADD_OP = { "+" | "-" }

INTEGER = { ASCII_DIGIT+ }

FRACTION = { "Frac" ~ WHITE_SPACE* ~ "[" ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ "]" }

MATRIX = { "Mat"  ~ WHITE_SPACE* ~ "[" ~ WHITE_SPACE* ~ MATRIX_ROWS ~ WHITE_SPACE* ~ "]" }
MATRIX_ROWS = { VECTOR_ROW ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ VECTOR_ROW)* }

VECTOR = { "Vec" ~ WHITE_SPACE* ~ VECTOR_ROW }
VECTOR_ROW = { "[" ~ WHITE_SPACE* ~ EXPR ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ EXPR)* ~ WHITE_SPACE* ~ "]" }

BOOL = { "True" | "true" | "False" | "false" | "None" | "none" }

// // POLYNOMIAL = { "Poly" ~ WHITE_SPACE* ~ "[" ~ WHITE_SPACE* ~ IDENTIFIER ~ WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ EXPR ~ WHITE_SPACE* ~ "]" }
// POLYNOMIAL = { "Poly" ~ WHITE_SPACE* ~ "[" ~ WHITE_SPACE* ~ POLYNOMIAL_VAR ~ WHITE_SPACE* ~ ":" ~ WHITE_SPACE* ~ POLYNOMIAL_COEFFICIENTS ~ WHITE_SPACE* ~ "]" }
// POLYNOMIAL_VAR = { IDENTIFIER }
// // POLYNOMIAL_VARS = { IDENTIFIER ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ IDENTIFIER)* }
// POLYNOMIAL_COEFF = { EXPR }
// POLYNOMIAL_COEFFICIENTS = { POLYNOMIAL_COEFF ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ POLYNOMIAL_COEFF)* }

IDENTIFIER = { ASCII_ALPHA ~ ASCII_ALPHA_NUM* }
